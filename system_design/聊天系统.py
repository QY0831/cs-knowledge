"""
WebSocket: 由客户端发起的双向且持续的连接。
发送者 <-ws-> 聊天服务 <-ws-> 接受者

无状态服务：登陆、注册、用户管理
有状态服务：聊天服务

根据并发用户的量来决定能否将所有服务放在一台机器上，
假设1M并发用户，每个连接10KB内存，总共需要约10gb内存

存储：
1. 用户信息、设置 -> 关系型数据库
2. 聊天记录 -> 键值存储：方便横向拓展、查询快。
messege表
-message_id (key)
-message_from
-message_to
-content
-create_at

group message表
-channel_id (key)
-message_id (key)
-user_id
-content
-created_at

因为message需要能以时间排序且唯一，可以使用本地序列号生成器。

服务发现：
基于地理位置、服务器性能等条件推荐客户端最佳的聊天服务器。
Zookeeper是开源服务发现解决方案。
用户登录->负载均衡器->api服务->zookeeper->最佳聊天服务器->建立ws连接

消息流：
1. 一对一消息流
用户a与聊天服务器1建立连接、发送消息
 ->聊天服务器1将新消息加入消息同步队列
 ->消息保存到键值数据库
 ->若用户b在线，消息被转发到用户b连接的聊天服务器2；聊天服务器2将消息转发给用户b
   若不在线，发送一个推送通知给推送服务器
   
2. 多个设备同步消息
每个设备维护一个cur_max_message_id的变量，用于追踪该设备上最新消息ID。
键值存储中的消息id大于cur_max_message_id，从数据库获取新消息。

3. 群聊消息流
为每个群成员设置一个消息同步队列，当有用户发送消息时，将消息放到其他成员的消息同步队列中。

在线状态：
用户登录时，将用户的在线状态status和最后活跃时间存储在键值存储中，在线状态指示器显示其在线。
用户退出时，将用户的状态改为离线，在线状态指示器显示其离线。

为避免网络不稳导致状态频繁切换，可以让客户端每5秒发送一个心跳给服务端，当一定时间内（如30秒）未收到心跳，视为离线。

在线状态广播：
发布-订阅模型的消息队列(kafka)，
当用户A状态改变后，将事件发布到A-B、A-C、A-D频道（消息队列），这三个频道分别被B,C,D订阅。
"""