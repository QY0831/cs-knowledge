"""
1. 负载均衡器 - 优化网络层
将请求分配到不同的Web服务器（无状态网络层）；避免单点故障。

2. 数据库复制 - 优化数据层
主从数据库，主负责写，从负责读；避免单点故障。

3. 缓存 - 提升加载、相应速度、减小数据负载
读操作频繁、写操作不频繁时使用。
设置过期策略，一旦数据过期，从缓存中清除。
一致性：数据写入时，同时更新缓存和数据库。
设置多个缓存服务器，避免单点故障。
驱逐策略：缓存满时，对已经条目进行清理（LRU）

4. CDN(内容分发网络) - 提升静态资源加载速度
用户访问静态资源时，由最近的CDN服务器返回。

5. 数据中心 - 提高可用性及更大地理区域的用户体验
数据中心包含 网络层和数据层。
负载均衡器根据地理位置转发请求到不同的数据中心（通过geoDNS）。
数据同步：用户请求而读取和写入的所有数据都存储在NoSQL中, 在异步复制到各个数据中心。

6. 消息队列 - 分配异步的请求
Web服务器发布任务自消息队列中，Worker从消息队列领取任务，并异步执行。

7. 数据库拓展 
纵向拓展：增强算力、容量
横向拓展：分片，将大数据库拆分成更小的部分（shard），根据用户ID，用户数据分配到其中一个数据库服务器上，
每次访问数据时，就用哈希函数来找到对应的shard。
"""