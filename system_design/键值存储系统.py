"""
分布式系统的属性
C: 一致性
A: 可用性
P: (网络)分区容错性

当使用网络分区时，只能达到C,A中的一个

分布式键值存储
1. 数据分区：使用一致性哈希使数据均匀分布在不同服务器上。

2. 数据复制：为了提升可用性和可靠性，数据必须在N个服务器上异步复制：
            当KEY映射到某个位置后,从这个位置开始的N个服务器都存储数据副本。
            
3. 一致性：确保数据副本间保持同步。
   N: 副本数量
   W: 一个写操作的成功，必须得到W个副本的确认。
   R：一个读操作的成功，必须得到R个副本的确认。
   N、W、R的配置取决于系统对一致性、读写性能之间的权衡。
   若 R = 1， W = N，则对快速读进行了优化。
   若 W = 1， R = N，则对快速写进行了优化。
   若 W + R > N，则保证了强一致性。

推荐的是《最终一致性（Eventually Consistent）模型》，是一种弱一致性模型，经过足够长的时间，所有的数据更新会传播，副本会变地一致。

解决不一致性：
使用《向量时钟》进行版本控制
时钟本质上是一个（节点，timestamp）对
服务器A获取写入请求(k1,v1)，并创建矢量时钟[A:1]，此写入复制到服务器B.
假设服务器A和B无法通信：
 1.A得到请求(k1,v2)，创建[A:2]，
 2.B得到请求(k1,v3)，创建[B:1]，
现在通信恢复，此时读请求k1，会得到两个不同的结果，服务器根据向量时钟，使用最新的数据，并将新数据广播。


4. 处理故障
Gossip协议
 1. 每个节点维护一个节点成员列表，包含成员ID和心跳
 2. 每个节点定期增加自己的心跳计数
 3. 每个节点定期给一组随机节点发送心跳信号，这些节点更新成员列表，并将心跳再发送出去
 4. 一旦节点收到信号，就更新列表
 5. 如果心跳计数在预定时间内未增加，则认为该成员宕机

处理临时故障 -> 松散仲裁：
放生故障时，不阻塞读写操作，选择哈希环上最先发现的W个正常工作的服务器进行写操作，R个正常工作的服务器进行读操作。
当故障服务器恢复时，变更会被推送回来以实现数据一致性。

处理永久故障 -> 反熵协议：
当一个副本完全不可用时，我们需要将数据复制到其他可用节点；
使用哈希树可以高效和安全验证数据结构中的内容，最小化数据传输量，将需要更新的数据传输。


5. 系统架构
 1. 客户端和存储系统通过API通信：get(key), put(key, value)
 2. 协调者在客户端和存储系统间充当代理
 3. 节点分布在哈希环上（一致性哈希）
 4. 完全去中心化，添加和移除节点方便
 5. 数据被复制到多个节点
 6. 每个节点职责相同，没有单点故障

6. 写请求（Cassandra架构）
 1. 写请求在日志中持久化
 2. 数据保存在内存缓存中
 3. 当内存到达阈值时，数据刷新到磁盘，SSTable（Sorted String Table）是一种用于存储键值对的有序数据结构

7. 读请求
 1. 检查数据是否在内存中
 2. 不在内存中，从硬盘中检索，使用布隆过滤器可以高效查出在哪个SSTable
"""