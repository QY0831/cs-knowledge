"""
分布式系统的属性
C: 一致性
A: 可用性
P: (网络)分区容错性

当使用网络分区时，只能达到C,A中的一个

分布式键值存储
1. 数据分区：使用一致性哈希使数据均匀分布在不同服务器上。

2. 数据复制：为了提升可用性和可靠性，数据必须在N个服务器上异步复制：
            当KEY映射到某个位置后,从这个位置开始的N个服务器都存储数据副本。
            
3. 一致性：确保数据副本间保持同步。
   N: 副本数量
   W: 一个写操作的成功，必须得到W个副本的确认。
   R：一个读操作的成功，必须得到R个副本的确认。
   N、W、R的配置取决于系统对一致性、读写性能之间的权衡。
   若 R = 1， W = N，则对快速读进行了优化。
   若 W = 1， R = N，则对快速写进行了优化。
   若 W + R > N，则保证了强一致性。

推荐的是《最终一致性（Eventually Consistent）模型》，是一种弱一致性模型，经过足够长的时间，所有的数据更新会传播，副本会变地一致。

解决不一致性：
a. 版本控制
用户a,b同时修改一篇文章，每个作者在本地维护一个数据版本号，开始版本号都为0。
a编辑并提交修改，此时他的本地版本号为1。
b编辑并提交修改，此时他的本地版本号为0，系统检测到版本号冲突，因为版本号已经过期。系
统可以触发冲突解决机制，例如通知作者B存在冲突，要求他重新处理。
b拉取并更新自己的修改，合并保存，此时版本号为2。

b. 向量时钟
时钟本质上是一个（节点，timestamp）对
服务器A获取写入请求(k1,v1)，并创建矢量时钟[A:1]，此写入复制到服务器B.
假设服务器A和B无法通信：
1.A得到请求(k1,v2)，创建[A:2]，
2.B得到请求(k1,v3)，创建[B:1]，
现在通信恢复，此时读请求k1，会得到两个不同的结果，服务器根据向量时钟，使用最新的数据，并将新数据广播。
"""